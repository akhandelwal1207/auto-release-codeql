name: "CodeQL-Fly solution-4"

on:
  workflow_dispatch:
    inputs:
      analysis_ref:
        description: 'Branch or tag to analyze'
        required: true
      commit_sha:
        description: 'Optional commit SHA'
        required: false
      # Add more inputs here if needed

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ matrix.language == 'swift' && 'macos-latest' || 'ubuntu-latest' }}
    env:
      GITHUB_REF: ${{ github.event.inputs.analysis_ref }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.analysis_ref }}
          fetch-depth: 0

      - name: Checkout specific commit (if provided)
        if: ${{ github.event.inputs.commit_sha != '' }}
        run: git checkout ${{ github.event.inputs.commit_sha }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - if: ${{ matrix.build-mode == 'manual' }}
        name: Manual build required
        run: |
          echo "You selected 'manual' build-mode for ${{ matrix.language }}. Add your build commands here."
          exit 1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: ${{ matrix.language }}
          output: results.sarif

      - name: Upload SARIF results artifact
        uses: actions/upload-artifact@v4
        with:
          name: sarif-results
          path: |
            results.sarif/*.sarif

      - name: Extract alerts from SARIF and include workflow inputs
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          jq -s --arg repo "${GITHUB_REPOSITORY}"                 --arg ref "${{ github.event.inputs.analysis_ref }}"                 --arg commit "${{ github.event.inputs.commit_sha || github.sha }}"                 --arg ts "$timestamp"                 --arg lang "${{ matrix.language }}"                 --argjson inputs '${{ toJSON(github.event.inputs) }}'                 '
                # gather rules from driver
                ( [ .[].runs[]?.tool.driver.rules[]? ] 
                  + 
                  # gather rules from all extensions
                  [ .[].runs[]?.tool.extensions[]?.rules[]? ]
                ) 
                | reduce .[] as $r ({}; .[$r.id] = {
                    securitySeverity: (try $r.properties."security-severity" // ""),
                    precision: (try $r.properties.precision // ""),
                    tags: (try $r.properties.tags // []),
                    help: (try $r.help // ""),
                    helpUrl: (try $r.helpUri // ""),
                    defaultLevel: (try $r.defaultConfiguration.level // "note"),
                    kind: (try $r.properties.kind // "problem")
                  })
                ) as $rules

                | {
                    repository: $repo,
                    ref: $ref,
                    commit: $commit,
                    timestamp: $ts,
                    language: $lang,
                    inputs: $inputs,
                    alerts: (
                      [ .[] | .runs[]? | .results[]? 
                        | {
                            ruleId: .ruleId,
                            message: .message.text,
                            file: .locations[0].physicalLocation.artifactLocation.uri,
                            startLine: .locations[0].physicalLocation.region.startLine,
                            severity: ($rules[.ruleId].securitySeverity // "unknown"),
                            level: (.level // $rules[.ruleId].defaultLevel // "note"),
                            kind: ($rules[.ruleId].kind // "problem"),
                            precision: ($rules[.ruleId].precision // ""),
                            tags: ($rules[.ruleId].tags // []),
                            help: ($rules[.ruleId].help // ""),
                            helpUrl: ($rules[.ruleId].helpUrl // ""),
                            fingerprints: (try .partialFingerprints // {})
                          }
                      ]
                      | unique_by(.ruleId, .file, .startLine, .message)
                      // []
                    )
                  }
                ' results.sarif/*.sarif > alerts.json

      - name: Send results to webhook
        if: always()
        run: |
          curl -s -X POST \
            -H "Content-Type: application/json" \
            -d @alerts.json \
            "https://10bb6deab879.ngrok-free.app/test"
